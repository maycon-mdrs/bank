/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 13 17:14:53 GMT 2024
 */

package com.imd.bank;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;

import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Bank_ESTest extends Bank_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Bank bank0 = new Bank();
      Customer customer0 = new Customer(";5x)]Iz*)z=");
      BankAccount bankAccount0 = new BankAccount(";5x)]Iz*)z=", (-873.0));
      customer0.addAccount(bankAccount0);
      bank0.addCustomer(customer0);
      // Undeclared exception!
      try { 
        bank0.transfer(";5x)]Iz*)z=", ";5x)]Iz*)z=", ";5x)]Iz*)z=", "p/%;e;Rv~>z6\"|=", 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Account not found
         //
         verifyException("com.imd.bank.Customer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Bank bank0 = new Bank();
      Customer customer0 = new Customer("");
      bank0.addCustomer(customer0);
      // Undeclared exception!
      try { 
        bank0.transfer("", "Customer not found", "", "", (-1849.59347781));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Account not found
         //
         verifyException("com.imd.bank.Customer", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Bank bank0 = new Bank();
      Customer customer0 = new Customer("");
      bank0.addCustomer(customer0);
      // Undeclared exception!
      try { 
        bank0.transfer("", "", "B", "o~o-6kEq>>,@.ovpT&%", 0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Customer not found
         //
         verifyException("com.imd.bank.Bank", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Bank bank0 = new Bank();
      Customer customer0 = new Customer("z\"@vF`B!)1ZGL");
      BankAccount bankAccount0 = new BankAccount("z\"@vF`B!)1ZGL", 28.60619);
      customer0.addAccount(bankAccount0);
      bank0.addCustomer(customer0);
      bank0.transfer("z\"@vF`B!)1ZGL", "z\"@vF`B!)1ZGL", "z\"@vF`B!)1ZGL", "z\"@vF`B!)1ZGL", 28.60619);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Bank bank0 = new Bank();
      Customer customer0 = new Customer("6$_E");
      BankAccount bankAccount0 = new BankAccount((String) null, (-1849.59347781));
      customer0.addAccount(bankAccount0);
      bank0.addCustomer(customer0);
      // Undeclared exception!
      try { 
        bank0.transfer("6$_E", "6$_E", "6$_E", "6$_E", (-1849.59347781));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.imd.bank.Customer", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Bank bank0 = new Bank();
      Customer customer0 = new Customer("");
      BankAccount bankAccount0 = new BankAccount("", (-177.7));
      customer0.addAccount(bankAccount0);
      bank0.addCustomer(customer0);
      // Undeclared exception!
      try { 
        bank0.transfer("", "", "", "", 610.6);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Insufficient balance
         //
         verifyException("com.imd.bank.BankAccount", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Bank bank0 = new Bank();
      Customer customer0 = new Customer("");
      bank0.addCustomer(customer0);
      Customer customer1 = bank0.getCustomer("");
      assertEquals("", customer1.getName());
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Bank bank0 = new Bank();
      // Undeclared exception!
      try { 
        bank0.getCustomer("E^H2}>8!ms?X4kMV-1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Customer not found
         //
         verifyException("com.imd.bank.Bank", e);
      }
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Bank bank0 = new Bank();
      // Undeclared exception!
      try { 
        bank0.addCustomer((Customer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Customer cannot be null
         //
         verifyException("com.imd.bank.Bank", e);
      }
  }
}
