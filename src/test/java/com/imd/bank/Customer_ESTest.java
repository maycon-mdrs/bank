/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 13 17:13:45 GMT 2024
 */

package com.imd.bank;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;

import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Customer_ESTest extends com.imd.bank.Customer_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      Customer customer0 = new Customer((String) null);
      String string0 = customer0.getName();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      Customer customer0 = new Customer("");
      String string0 = customer0.getName();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      Customer customer0 = new Customer("");
      BankAccount bankAccount0 = new BankAccount("", (-1769.2388802304));
      customer0.addAccount(bankAccount0);
      List<BankAccount> list0 = customer0.getAccounts();
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      Customer customer0 = new Customer("com.imd.bank.BankAccount");
      BankAccount bankAccount0 = new BankAccount("com.imd.bank.BankAccount", 958.1);
      bankAccount0.withdraw(958.1);
      customer0.addAccount(bankAccount0);
      BankAccount bankAccount1 = customer0.getAccount("com.imd.bank.BankAccount");
      assertSame(bankAccount1, bankAccount0);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      Customer customer0 = new Customer("Withdrawal amount must be positive");
      BankAccount bankAccount0 = new BankAccount("Withdrawal amount must be positive", (-317.547));
      customer0.addAccount(bankAccount0);
      BankAccount bankAccount1 = customer0.getAccount("Withdrawal amount must be positive");
      assertEquals((-317.547), bankAccount1.getBalance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      Customer customer0 = new Customer((String) null);
      BankAccount bankAccount0 = new BankAccount((String) null, (-4043.1759));
      customer0.addAccount(bankAccount0);
      // Undeclared exception!
      try { 
        customer0.getAccount((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      Customer customer0 = new Customer("j>APQ)");
      // Undeclared exception!
      try { 
        customer0.addAccount((BankAccount) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Account cannot be null
         //
         verifyException("com.imd.bank.Customer", e);
      }
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      Customer customer0 = new Customer("com.imd.bank.BankAccount");
      BankAccount bankAccount0 = new BankAccount("com.imd.bank.BankAccount", 1843.39450261);
      customer0.addAccount(bankAccount0);
      BankAccount bankAccount1 = customer0.getAccount("com.imd.bank.BankAccount");
      assertEquals(1843.39450261, bankAccount1.getBalance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      Customer customer0 = new Customer("com.imd.bank.BankAccount");
      // Undeclared exception!
      try { 
        customer0.getAccount("com.imd.bank.BankAccount");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Account not found
         //
         verifyException("com.imd.bank.Customer", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      Customer customer0 = new Customer("com.imd.bank.BankAccount");
      List<BankAccount> list0 = customer0.getAccounts();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      Customer customer0 = new Customer("com.imd.bank.BankAccount");
      String string0 = customer0.getName();
      assertEquals("com.imd.bank.BankAccount", string0);
  }
}
