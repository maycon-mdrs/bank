/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 13 17:06:11 GMT 2024
 */

package com.imd.bank;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.imd.bank.BankAccount;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class BankAccount_ESTest extends BankAccount_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test00()  throws Throwable  {
      BankAccount bankAccount0 = new BankAccount("E35&", 2522.74960516305);
      BankAccount bankAccount1 = new BankAccount((String) null, 2522.74960516305);
      bankAccount0.transfer(bankAccount1, 2522.74960516305);
      assertEquals(7568.248815489151, bankAccount1.getBalance(), 0.01);
      assertEquals(0.0, bankAccount0.getBalance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test01()  throws Throwable  {
      BankAccount bankAccount0 = new BankAccount("-gflor9XpOLX^", (-4444.044766658));
      // Undeclared exception!
      try { 
        bankAccount0.withdraw((-4444.044766658));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Withdrawal amount must be positive
         //
         verifyException("com.imd.bank.BankAccount", e);
      }
  }

  @Test(timeout = 4000)
  public void test02()  throws Throwable  {
      BankAccount bankAccount0 = new BankAccount("a1M]5ehl7>qjju", 0.0);
      // Undeclared exception!
      try { 
        bankAccount0.deposit(0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Deposit amount must be positive
         //
         verifyException("com.imd.bank.BankAccount", e);
      }
  }

  @Test(timeout = 4000)
  public void test03()  throws Throwable  {
      BankAccount bankAccount0 = new BankAccount("{A^uQO#G+(nIL", 1250.0);
      double double0 = bankAccount0.getBalance();
      assertEquals(1250.0, double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test04()  throws Throwable  {
      BankAccount bankAccount0 = new BankAccount((String) null, (-1.0));
      double double0 = bankAccount0.getBalance();
      assertEquals((-1.0), double0, 0.01);
  }

  @Test(timeout = 4000)
  public void test05()  throws Throwable  {
      BankAccount bankAccount0 = new BankAccount((String) null, (-2162.1));
      String string0 = bankAccount0.getAccountNumber();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test06()  throws Throwable  {
      BankAccount bankAccount0 = new BankAccount("", (-3694.532214));
      String string0 = bankAccount0.getAccountNumber();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test07()  throws Throwable  {
      BankAccount bankAccount0 = new BankAccount("Destination account cannot be null", 0.0);
      // Undeclared exception!
      try { 
        bankAccount0.transfer(bankAccount0, 2753.63);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Insufficient balance
         //
         verifyException("com.imd.bank.BankAccount", e);
      }
  }

  @Test(timeout = 4000)
  public void test08()  throws Throwable  {
      BankAccount bankAccount0 = new BankAccount("", 1866.9424610782);
      // Undeclared exception!
      try { 
        bankAccount0.withdraw(0.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Withdrawal amount must be positive
         //
         verifyException("com.imd.bank.BankAccount", e);
      }
  }

  @Test(timeout = 4000)
  public void test09()  throws Throwable  {
      BankAccount bankAccount0 = new BankAccount("", 487.893);
      // Undeclared exception!
      try { 
        bankAccount0.transfer((BankAccount) null, 2380.5461);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Destination account cannot be null
         //
         verifyException("com.imd.bank.BankAccount", e);
      }
  }

  @Test(timeout = 4000)
  public void test10()  throws Throwable  {
      BankAccount bankAccount0 = new BankAccount("4-nRH", 547.05361);
      bankAccount0.withdraw(547.05361);
      // Undeclared exception!
      try { 
        bankAccount0.withdraw(547.05361);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Insufficient balance
         //
         verifyException("com.imd.bank.BankAccount", e);
      }
  }

  @Test(timeout = 4000)
  public void test11()  throws Throwable  {
      BankAccount bankAccount0 = new BankAccount("N,-vbLqT[#>\"", 367.0915118816188);
      // Undeclared exception!
      try { 
        bankAccount0.deposit((-876.20175864));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Deposit amount must be positive
         //
         verifyException("com.imd.bank.BankAccount", e);
      }
  }

  @Test(timeout = 4000)
  public void test12()  throws Throwable  {
      BankAccount bankAccount0 = new BankAccount("E35&", 2522.74960516305);
      bankAccount0.deposit(2522.74960516305);
      bankAccount0.transfer(bankAccount0, 2522.74960516305);
      assertEquals(7568.248815489151, bankAccount0.getBalance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test13()  throws Throwable  {
      BankAccount bankAccount0 = new BankAccount("N,-vbLqT[#>\"", 367.0915118816188);
      bankAccount0.getAccountNumber();
      assertEquals(367.0915118816188, bankAccount0.getBalance(), 0.01);
  }

  @Test(timeout = 4000)
  public void test14()  throws Throwable  {
      BankAccount bankAccount0 = new BankAccount("V!wC`8", 0.0);
      double double0 = bankAccount0.getBalance();
      assertEquals(0.0, double0, 0.01);
  }
}
