/*
 * This file was automatically generated by EvoSuite
 * Sun Oct 13 17:08:31 GMT 2024
 */

package com.imd.bank;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.imd.bank.Bank;
import com.imd.bank.BankAccount;
import com.imd.bank.Customer;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Bank_ESTest extends Bank_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Bank bank0 = new Bank();
      Customer customer0 = new Customer("com.imd.bank.BankAccount");
      BankAccount bankAccount0 = new BankAccount("Af^My!{+5+hcf8C.4^+", 1.0);
      customer0.addAccount(bankAccount0);
      bank0.addCustomer(customer0);
      // Undeclared exception!
      try { 
        bank0.transfer("com.imd.bank.BankAccount", "Af^My!{+5+hcf8C.4^+", "com.imd.bank.BankAccount", "JK!`?<N)Ts_hVYSV", 1.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Account not found
         //
         verifyException("com.imd.bank.Customer", e);
      }
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Bank bank0 = new Bank();
      Customer customer0 = new Customer("Customer not found");
      bank0.addCustomer(customer0);
      Customer customer1 = new Customer("com.imd.bank.BankAccount");
      BankAccount bankAccount0 = new BankAccount("com.imd.bank.BankAccount", 1.0);
      customer1.addAccount(bankAccount0);
      bank0.addCustomer(customer1);
      // Undeclared exception!
      try { 
        bank0.transfer("com.imd.bank.BankAccount", "com.imd.bank.BankAccount", "Customer not found", "Customer not found", 1.0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Account not found
         //
         verifyException("com.imd.bank.Customer", e);
      }
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Bank bank0 = new Bank();
      Customer customer0 = new Customer("QD");
      bank0.addCustomer(customer0);
      // Undeclared exception!
      try { 
        bank0.transfer("QD", "QD", "", "<a|FA=]lT:;U0uMv8@", (-1.0));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Customer not found
         //
         verifyException("com.imd.bank.Bank", e);
      }
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Bank bank0 = new Bank();
      Customer customer0 = new Customer("com.imd.bank.BankAccount");
      BankAccount bankAccount0 = new BankAccount("com.imd.bank.BankAccount", 1.0);
      customer0.addAccount(bankAccount0);
      bank0.addCustomer(customer0);
      bank0.transfer("com.imd.bank.BankAccount", "com.imd.bank.BankAccount", "com.imd.bank.BankAccount", "com.imd.bank.BankAccount", 1.0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Bank bank0 = new Bank();
      Customer customer0 = new Customer("com.imd.bank.BankAccount");
      BankAccount bankAccount0 = new BankAccount((String) null, 1.0);
      customer0.addAccount(bankAccount0);
      bank0.addCustomer(customer0);
      // Undeclared exception!
      try { 
        bank0.transfer("com.imd.bank.BankAccount", "com.imd.bank.BankAccount", "com.imd.bank.BankAccount", "com.imd.bank.BankAccount", (-1.0));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.imd.bank.Customer", e);
      }
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      Bank bank0 = new Bank();
      Customer customer0 = new Customer("com.imd.bank.BankAccount");
      BankAccount bankAccount0 = new BankAccount("com.imd.bank.BankAccount", 1.0);
      customer0.addAccount(bankAccount0);
      bank0.addCustomer(customer0);
      // Undeclared exception!
      try { 
        bank0.transfer("com.imd.bank.BankAccount", "com.imd.bank.BankAccount", "com.imd.bank.BankAccount", "com.imd.bank.BankAccount", 18.015426277259053);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Insufficient balance
         //
         verifyException("com.imd.bank.BankAccount", e);
      }
  }

  @Test(timeout = 4000)
  public void test6()  throws Throwable  {
      Bank bank0 = new Bank();
      // Undeclared exception!
      try { 
        bank0.getCustomer("Customer cannot be null");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Customer not found
         //
         verifyException("com.imd.bank.Bank", e);
      }
  }

  @Test(timeout = 4000)
  public void test7()  throws Throwable  {
      Bank bank0 = new Bank();
      Customer customer0 = new Customer("com.imd.bank.BankAccount");
      bank0.addCustomer(customer0);
      Customer customer1 = bank0.getCustomer("com.imd.bank.BankAccount");
      assertEquals("com.imd.bank.BankAccount", customer1.getName());
  }

  @Test(timeout = 4000)
  public void test8()  throws Throwable  {
      Bank bank0 = new Bank();
      // Undeclared exception!
      try { 
        bank0.addCustomer((Customer) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Customer cannot be null
         //
         verifyException("com.imd.bank.Bank", e);
      }
  }
}
